/*
 *
 * This file is part of the LXARDOSCOPE package.
 *
 * LXARDOSCOPE is an Arduino based oscilloscope for Linux, using the Xforms library.
 *
 * Copyright (C) 2011,2012 Oskar Leuthold
 * 
 * LXARDOSCOPE is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LXARDOSCOPE is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with LXARDOSCOPE; see the file COPYING.  If not, write to
 * the Free Software Foundation, 59 Temple Place - Suite 330, Boston,
 * MA 02111-1307, USA.
 *
 */


Introduction
************
LXARDOSCOPE (LinuX-ARDunio-oscillOSCOPE) is a software implementation of an 
oscilloscope in LINUX, using the Analog-Digial converter of an Arduino UNO or
ATmega328 for data acquisition. 

My goal was to keep the LXARDOSCOPE GUI as intuitive as possible for users who are
familiar with hardware oscilloscopes. I am assuming that the vast majority of 
users fall into this category, since this is a measuring instrument for use with
electric circuits. Therefore there is no user's manual, only the instructions
included in this README file.
There are many tutorials for oscilloscopes available on the internet; any extra
functions provided here should be self explanatory - otherwise submit a request
for clarification through the Sourceforge support page.

When LXARDOSCOPE is running on my desktop PC, with CPU clock at 1.6GHz, under
Mint 9, LXARDOSCOPE needs about 2% CPU time, while Xorg takes a maximum of 13%,
with 5 seconds of data displayed. For an old laptop computer, 300MHz Pentium II,
under TINY, LXARDOSCOPE needs 16% and XVESA 38%. Tests have shown that these
numbers can be reduced significantly by updating the display at a lower rate 
(editing  and re-compiling required). 

Features
********* 
	- display modes: two channels, time/add/xy
	- vertical: 2mV to 10V per division
	- overall gain control for calibration
	- horizontal: 1ms to 5 sec (full sweep)
	- trace position adjustments: vertical and horizontal
	- trigger: on/off, channel and edge selection
	- trigger level: -10 to +10V
	- hysteresis up to 5V
	- signal measurements: max, min, pp, avg, rms
	- display signal levels and timing at cursor position
	- close to 3000 samples per second, per channel
	- option for reviewing snapshot of data
	- option for recording input data stream to file
	- option to display recorded data from file
	- timebase calibration adapting to Arduino's conversion speed
	- GND calibration procedure for selecting arbitrary GND potential

Arduino vs ATmega328
*********************
The Arduino UNO board contains the ATmega328 circuit and a chip to communicate
with the USB port of a host computer. Most of the time I use the ATmega328 DIL
circuits on breadboards without the Arduino board, and I use the Arduino software
functionality provided by GNODUINO for programming the devices. Therefore in this
document, I refer generally to the ATmega328 without the board. 
A simple setup using the serial port of the PC for communication, is shown in the
directory ATmega328board. For other hardware solutions, see the document
ATmega328Accuracy.pdf, which summarizes my investigation on accuracy issues
with the ATmega328 ADC. It contains schematics of preamplifiers and interface
circuits for serial and USB ports, including an extension which provides full
electical insulation of the ATmega and the host computer.

LXARDOSCOPE differences with respect to a conventional oscilloscope:
********************************************************************
The display is not updated continuously, but rather shows a snapshot of the data 
approximately every 300ms. Thus with long time scales, the waveform seems to
move from right to left; therefore a particular event can show up several times.
As opposed to an analog oscilloscope, which operates with signals continuous in
time and levels, LXARDOSCOPE works on the data points from the ATmega, which 
converts the real signal to discrete samples in time and levels. The display
shows simple linear interpolation between these data points, which is admittedly
in general a poor approximation of the true signal. Another source of discrepancy
are signal components input to the ATmega above 1.5kHz (half the sampling rate);
they appear folded into components below 1.5kHz. This folding process is not 
specific to this application, but rather a general property of any sampling
process. And finally the fact that the ATmega samples the two channels in an
alternating fashion creates additional artifacts (see below).     
In LXARDOSCOPE the time base setting is in terms of full scale, not graticule
division. This is based on considerations of the scaling process. For example,
if full scale is set to 12ms, the LXARDOSCOPE graticule shows 13 vertical
lines at 0, 1, 2 ...  10, 11, 12 ms, which is easy to read. On a division based
approach, always 10 divisions are used. For 12ms full scale, the increments are
1.2, thus producing grid lines at 0, 1.2, 2.4 .....10.8, 12, which is much less
convenient to read. 


Development
***********
LXARDOSCOPE has been developed and tested on Linux Mint9 (32bit) for ATmega328
devices, with the included lxardoscope.pde (in the ATmega directory). 
 

Installation
************
The downloaded file contains an executable, which hopefully works on your computer.
The appropriate XFORMS executable is linked statically, to simplify installation
and to eliminate problems with incompatible versions of the library, which might
exist on the host computer.
After unpacking the downloaded file, cd to the lxardoscope directory and type
" ./lxardoscope " (without quotes).
For a general installation, type
either " sudo make install "
or " sudo cp lxardoscope /usr/local/sbin "
After installation, the system wide start command is " lxardoscope ".

If the supplied executable does not run on your system, you can re-compile:
1. install libx11-dev (using apt, Synaptic)
2. build:   " make "
4. install and run as above

If these steps do not work, you have to rebuild the Xforms library, which will
produce a new libforms.a. LXARDOSCOPE requires XForms Version 1.0.93sp1. The
directory xforms-1.0.93sp1_ext contains the files which might have to be updated.
The XForms source package is available at 
	http://savannah.nongnu.org/projects/xforms .


Port issues
***********
On Ubuntu style LINUX distros, when connecting the Arduino UNO to the USB port, a
device with a name starting as ttyACM is created in the /dev directory, which can
be accessed like a regular serial port. If you remove the Arduino and reconnect
again, the port number might change, for example from ttyACM0 to ttyACM1.
With other Serial-to-USB converter circuits, a device with a name starting as 
ttyUSB is created. 
When working with the regular serial ports, keep in mind that the signal levels
can be up to 15V. Some integrated circuits are destroyed if such a high voltage
is applied to a pin.
The document ATmega328Accuracy.pdf contains a schematic which shows how opto-
couplers can be used to insulate the supplies of the ATmega (and with it the
analog signal processing circuitry) from the PC.


How to get started
******************
First you need to program the ATmega328 with the supplied sketch lxardoscope.pde 
from the ATmega/lxardoscope directory. Connect your analog signals to the ADC
inputs ADC0 and ADC1 (A0 and A1 on Arduino UNO).
Two startup modes are available:
1. choose serial port at startup:
   type " lxardoskope /dev/ttySX " with X being the device number. The program 
   tries to initialize this serial port, but others can be selected later.
2. choose serial port on GUI:
   type " lxardoskope " . After starting up, the "Device" pulldown of the GUI is
   populated with the port choices available from the /dev directory. The list
   includes device names which start with "ttyS", "ttyACM" or "ttyUSB".
If the selected port is busy due to some other process, then the initialization
fails. A message is displayed in the terminal where LXARDOSCOPE was started,
if the selected device is not available. 
On success, the START button under the waveform area is enabled. Click it to start
acquiring and displaying the data. The pulse indicator changes color from grey, 
and then blinks in response to the serial data stream from the ATmega328. 
At least some horizontal lines should be displayed, maybe already some waveforms.
Then make the necessary adjustments to the timebase and vertical scale and
position, as on a conventional oscilloscope.
In display mode ADD, position and scale are taken from channel 1; entries for 
channel 2 are disabled. In display mode X-Y, the selected trigger channel is 
displayed in horizontal direction (independent whether triggering is enabled or
not). 
When triggering is enabled, source channel, edge, trigger level and hysteresis
can be selected. The displayed waveform can be shifted to the left or to the 
right, up to 500ms. This is useful for inspecting what happens immediately before
the trigger time point.
The displayed signals can be measured by placing the cursor with the mouse and
clicking at the time slice of interest. Time and levels are reported in the
" Signal Values " box. The measurement applies to the data displayed at the
moment the selection is made; the value is not continuously updated sub-
sequently.
After clicking the START/STOP button again, acquisition of new data stops and
the internally stored waveforms can be inspected. Vertical Position and Scale,
horizontal Full Scale and DisplayShift functions allow for zooming into the wave-
form. LXARDOSCOPE always displays the end of the stored waveform, with length
of approximately 10 seconds. With DisplayShift, about half a second of data can
be reviewed and measured using the cursor. 
  
Storing and reviewing data stream
*********************************
The data stream coming from the ATmega328 can be recorded to a file by clicking the 
"Record" button before the "START" button. A new window pops up for entering
the name of the new file (suggested extension is "raw"). When finished recor-
ding, click the "STOP" button, and toggle the " Record " button to stop recor-
ding and to save the file. The "Record" button is disabled when LXARDOSKOPE is
running. The raw file contains 16-bit (2-byte) sample values, for both channels,
no information on data rate. Of the 16 bits, only 10 are used, because that's 
what the ATmega328 analog-digital converter delivers. 
To inspect a raw file, select "file" on the "Device" pulldown (last entry). 
A new window pops up for selecting the raw file. The file is loaded, and
the beginning is displayed. The GUI changes in the Timebase area. A counter is
added for navigating in the file under the Full Scale counter, with the following
functionality:
	- single right arrow: shift display to later data, by 20% of full scale.
	- double right arrow: shift display to later data, by 80% of full scale.
	- singe left arrow: shift display to earlier data, by 20% of full scale.
	- double left arrow: shift display to earlier data, by 80% of full scale.
The amount of shift is close to the values indicated; differences are due to
rounding.
Between the navigation buttons, the position of the first sample, shown on the
left side of the waveform display, is indicated, in units of milliseconds.
Commas are used to separate the seconds from the milliseconds, and the seconds
from the thousand seconds. This area is actually an input field, accepting a 
floating point number; the black vertical line shows the position of the cursor.
In the waveform display area, a yellow line is shown at the end of data, to
distinguish from the case when the data itself is zero.
A 4-digit pushwheel widget allows for setting the Sampling Rate, between 1000
and 5000 samples per second. For accurate time measurements, the value must be
set to the one reported when recording the file (using the Timing button). 

How to adjust GND
*****************
For some applications the signals assume positive and negative values with respect
to GND, and it is convenient to look at the signals with respect to an arbitrary
GND, which is not at the same potential as the negative supply of the ATmeg328.
It just turns out that using PC GND as general GND reference, and supplying the
ATmeg328 with basically +/-2.5V, works also well for communication through the
serial interface; for a simple example see the schematic ATmega328simple.png.
However not that an insulating interface would be required for USB. 
To set the GND level, connect the analog inputs A0 and A1 of the ATmeg328 to GND.
Then press the button labeled GNDcal, which turns red. After about 5 seconds, the
calibration is finished and the button color changes to green. The offset deter-
mined for each channel is displayed in the terminal where LXARDOSCOPE was started.
The measured average signal level shown on the right side of the GUI goes close 
to zero. While the inputs are still connected to GND, the residual noise can be
observed, when the channel scale is turned down to a small value, like 10mV per
division.

Sampling rate
*************
When using the supplied lxardoscope.pde for the ATmeg328, with the transfer
rate of 115200 baud, LXARDOSCOPE starts up assuming 3000 samples per second. The 
actual rate at which data is delivered is continuously measured and the display
settings updated in regular intervals.  
After pressing the push button "Timing", the actual sampling rate is reported in
the terminal. With the supplied ATmeg328 code, and a 16MHz crystal, the sampling
rate is close to 2938 samples per second (for each channel). This compares
favorably with the serial port baud rate, as explained next. 
Every 10-bit sample from the converter is transmitted as two bytes. The serial
communication protocol adds a start and a stop bit to each byte. Thus for every
sample we get 20 bits. Therefore:
2942 (samples per second) * 20 (bits) * 2 (channels) = 117680 bits per second;
compare to 115200 Baud or bits per second. 
Preliminary tests indicate that the time required for analog-digital conversion
is about the same as the data transfer time; thus by speeding up the data
transfer, the converter becomes the bottleneck (unless accuracy is sacrificed
for speed). Therefore LXARDOSCOPE version 0.85 supports only a fixed transfer
rate of 115200 Baud. 

Alternate Sampling
******************
The ATmeg328 samples channel 1 and channel 2 in an alternating fashion; this means
not at the same time. In "Time" mode, LXARDOSCOPE displays channel 2 delayed
by half a sample with respect to channel 1. Thus when feeding the same signal
into both channels, they line up correctly; although for higher frequency signals
the data points can clearly be seen as alternating.
In "ADD" mode, the signals are interpolated and shifted, such that when feeding
the same signal into both channels, and inverting one of them, the resulting
waveform represents only noise.
In "XY" mode, the signals are not adjusted; therefore when feeding the same
signal into both channels, the delay can clearly be seen: for a sine wave, an
oval shape is shown. 
When feeding identical square waves into both channels, things get really ugly...    

Screen Capture
**************
The file lxardoscope_T.png contains a screen capture of the LXARDOSCOPE board and
the software in action. A 419.6 Hz sine wave and a 1468.6Hz square wave from a 
sound card based generator (LXIGGEN) are displayed. After executing GND calib-
ration, with values of 508, the signals are displayed as being symmetrical around
zero DC. 
The sampling rate is 2938 samples per second. So the square wave is sampled twice
per period, at the top and at the bottom, except for the transitions. The sine 
wave is sampled 7 times per period; that's why it looks ugly (LXARDOSCOPE offers
only straight line interpolation between data points).
The mouse pointer is placed at ten periods of the square wave; the corresponding
measurement result (in Signal Values) is 6.80ms, from which a frequency of 1471Hz
is calculated. 
The dotted blue line shows the trigger level at 0.00V.  The thin dotted magenta
line shows the hysteresis level, 0.9V, with respect to the trigger level. Its
position, above or below trigger level, is determined by trigger direction, up 
or down, rising or falling.
The vertical yellow line indicates 0ms time; that's where the trigger event 
occurred. 
The ratio of peak-to-peak to RMS for channel 1, 2.974/1.121, is 2.653, somewhat
lower than the theoretical value of 2.828 (2*sqrt(2)), because the negative peaks
have not been sampled (samples are placed earlier or later), and because there is
not an exact integer number of periods displayed, respectively used for the RMS
calculation.
The screen shot lxardoscope_XY.png shows an XY plot of a 50Hz sine wave on
channel 1 and a 250Hz sine wave on channel 2, produced with LXIGGEN. The Lissajous
figure displays the frequency ratio of 5, but also a lot of noise.

ADC input characteristics
**************************
The ATmeg328 inputs are connected through a multiplexer to a single analog-digital 
converter. Switching of the channels and possibly the operation of the converter
itself causes charge to be dumped into the input nodes. If the circuit node
connected to the ATmeg328 analog input has low capacitance and high resistance to
ground, then large spikes occur, which produce significant errors, in the order
of 0.5V. The document ATmega328Accuracy.pdf contains preamplifier schematics which
have good performance. With a 1MegOhm||33pF input impedance, they are compatible
with standard oscilloscope probes; thus readily available 10X and 100X probes can
be connected. 

Measurement results
*******************
On the right side of each channel setup field, measurement results for the 
displayed waveform are shown. The RMS result merits some explanation. It is
calculated from the data set which is also displayed. If this is a subset of a
periodic signal, then the RMS value of the periodic signal is only the same 
under the condition that a full number of periods are shown on the display.
So for example for a 100Hz sine wave, the time base should be set to full scale
of multiples of 10ms. Under these circumstances, the displayed RMS value applies
to the whole sine wave. 
The internal calculations have been checked with high purity sine waves, by
comparing the pp-to-rms ratio with the theoretical value of " 2*sqrt(2) " .
Note that due to the sampling process in time and signal level, the internal
representation can be significantly different; this reflects also in the measure-
ment results.

Problems observed:
******************
Randomly due to noise, LXARDOSCOPE receives incorrect data from the serial port.
In the terminal, an error message reports the corresponding byte, and the whole
data set (two samples) is ignored. If there are too many of these errors, then 
the connection between the ATmeg328 and the serial port should be checked. 
For monitoring the serial port independently, I have used the program CUTECOM
successfully (although it can not be used simulaneously with LXARDOSCOPE).

History
*******
LXARDOSCOPE is based on an XOSKOPE-0.5 (eXtended oscillOSKOPE), released in 2001,
created by J.Fernando Moyano (http://xoskope.sourceforge.net), and LXOSKOPE, 
released in 2011 (available from http://lxoskope.sourceforge.net). These pre-
decessors use the sound card for data acquisition instead of an ATmega device.

Acknowledgement
***************
Thanks to J. Fernando Moyano for XOSKOPE for creating the first version. 
Thanks to Dr. Zhao for creating the XFORMS library, which is used for the GUI.
Thanks to Tim Witham for XOSCOPE, an early oscilloscope program which is still
widely distributed.
 
I hope you find LXARDOSCOPE useful. 
Please submit comments to the support page of LXARDOSCOPE on Sourceforge.

July 21, 2012 Oskar Leuthold

